package by.mjc.entities;

import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAttribute;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAutoGeneratedKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBHashKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBTable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import lombok.*;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

@DynamoDBTable(tableName = "Routes")
@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class Route {
    @Getter(onMethod = @__({@DynamoDBHashKey, @DynamoDBAutoGeneratedKey}))
    private String id;
    @Getter(onMethod = @__({@DynamoDBAttribute}))
    private String name;
    @Getter(onMethod = @__({@DynamoDBAttribute}))
    private List<Place> points;
    @Getter(onMethod = @__({@DynamoDBAttribute}))
    private Position coords;
    @Getter(onMethod = @__({@DynamoDBAttribute}))
    private String imgUrl;
    @Getter(onMethod = @__({@DynamoDBAttribute}))
    private List<String> tags;
    @Getter(onMethod = @__({@DynamoDBAttribute}))
    private String description;
    @Getter(onMethod = @__({@DynamoDBAttribute, @JsonIgnore}))
    private List<String> cities;

    public void fillDenormalizedFields() {
        if (this.getPoints() != null) {
            Set<String> tagsSet = new HashSet<>();
            Set<String> citiesSet = new HashSet<>();

            this.getPoints().forEach(place -> {
                tagsSet.addAll(place.getTags());
                citiesSet.add(place.getLocation().getName());
            });

            this.tags = new ArrayList<>(tagsSet);
            this.cities = new ArrayList<>(citiesSet);
        }
    }
}
